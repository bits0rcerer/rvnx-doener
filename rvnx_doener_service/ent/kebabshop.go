// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rvnx_doener_service/ent/kebabshop"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// KebabShop is the model entity for the KebabShop schema.
type KebabShop struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OsmID holds the value of the "osm_id" field.
	OsmID *int `json:"osm_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat float64 `json:"lat,omitempty"`
	// Lng holds the value of the "lng" field.
	Lng float64 `json:"lng,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KebabShop) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case kebabshop.FieldLat, kebabshop.FieldLng:
			values[i] = new(sql.NullFloat64)
		case kebabshop.FieldID, kebabshop.FieldOsmID:
			values[i] = new(sql.NullInt64)
		case kebabshop.FieldName:
			values[i] = new(sql.NullString)
		case kebabshop.FieldCreated:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KebabShop", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KebabShop fields.
func (ks *KebabShop) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kebabshop.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ks.ID = int(value.Int64)
		case kebabshop.FieldOsmID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field osm_id", values[i])
			} else if value.Valid {
				ks.OsmID = new(int)
				*ks.OsmID = int(value.Int64)
			}
		case kebabshop.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ks.Name = value.String
			}
		case kebabshop.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				ks.Created = value.Time
			}
		case kebabshop.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				ks.Lat = value.Float64
			}
		case kebabshop.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				ks.Lng = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this KebabShop.
// Note that you need to call KebabShop.Unwrap() before calling this method if this KebabShop
// was returned from a transaction, and the transaction was committed or rolled back.
func (ks *KebabShop) Update() *KebabShopUpdateOne {
	return (&KebabShopClient{config: ks.config}).UpdateOne(ks)
}

// Unwrap unwraps the KebabShop entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ks *KebabShop) Unwrap() *KebabShop {
	_tx, ok := ks.config.driver.(*txDriver)
	if !ok {
		panic("ent: KebabShop is not a transactional entity")
	}
	ks.config.driver = _tx.drv
	return ks
}

// String implements the fmt.Stringer.
func (ks *KebabShop) String() string {
	var builder strings.Builder
	builder.WriteString("KebabShop(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ks.ID))
	if v := ks.OsmID; v != nil {
		builder.WriteString("osm_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ks.Name)
	builder.WriteString(", ")
	builder.WriteString("created=")
	builder.WriteString(ks.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", ks.Lat))
	builder.WriteString(", ")
	builder.WriteString("lng=")
	builder.WriteString(fmt.Sprintf("%v", ks.Lng))
	builder.WriteByte(')')
	return builder.String()
}

// KebabShops is a parsable slice of KebabShop.
type KebabShops []*KebabShop

func (ks KebabShops) config(cfg config) {
	for _i := range ks {
		ks[_i].config = cfg
	}
}
