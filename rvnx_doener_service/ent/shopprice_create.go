// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rvnx_doener_service/ent/kebabshop"
	"rvnx_doener_service/ent/shopprice"
	"rvnx_doener_service/ent/twitchuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jackc/pgtype"
)

// ShopPriceCreate is the builder for creating a ShopPrice entity.
type ShopPriceCreate struct {
	config
	mutation *ShopPriceMutation
	hooks    []Hook
}

// SetCreated sets the "created" field.
func (spc *ShopPriceCreate) SetCreated(t time.Time) *ShopPriceCreate {
	spc.mutation.SetCreated(t)
	return spc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (spc *ShopPriceCreate) SetNillableCreated(t *time.Time) *ShopPriceCreate {
	if t != nil {
		spc.SetCreated(*t)
	}
	return spc
}

// SetPrice sets the "price" field.
func (spc *ShopPriceCreate) SetPrice(pg *pgtype.Numeric) *ShopPriceCreate {
	spc.mutation.SetPrice(pg)
	return spc
}

// SetCurrency sets the "currency" field.
func (spc *ShopPriceCreate) SetCurrency(s shopprice.Currency) *ShopPriceCreate {
	spc.mutation.SetCurrency(s)
	return spc
}

// SetPriceType sets the "price_type" field.
func (spc *ShopPriceCreate) SetPriceType(st shopprice.PriceType) *ShopPriceCreate {
	spc.mutation.SetPriceType(st)
	return spc
}

// SetAnonymous sets the "anonymous" field.
func (spc *ShopPriceCreate) SetAnonymous(b bool) *ShopPriceCreate {
	spc.mutation.SetAnonymous(b)
	return spc
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (spc *ShopPriceCreate) SetNillableAnonymous(b *bool) *ShopPriceCreate {
	if b != nil {
		spc.SetAnonymous(*b)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *ShopPriceCreate) SetID(u uint64) *ShopPriceCreate {
	spc.mutation.SetID(u)
	return spc
}

// SetShopID sets the "shop" edge to the KebabShop entity by ID.
func (spc *ShopPriceCreate) SetShopID(id uint64) *ShopPriceCreate {
	spc.mutation.SetShopID(id)
	return spc
}

// SetNillableShopID sets the "shop" edge to the KebabShop entity by ID if the given value is not nil.
func (spc *ShopPriceCreate) SetNillableShopID(id *uint64) *ShopPriceCreate {
	if id != nil {
		spc = spc.SetShopID(*id)
	}
	return spc
}

// SetShop sets the "shop" edge to the KebabShop entity.
func (spc *ShopPriceCreate) SetShop(k *KebabShop) *ShopPriceCreate {
	return spc.SetShopID(k.ID)
}

// SetAuthorID sets the "author" edge to the TwitchUser entity by ID.
func (spc *ShopPriceCreate) SetAuthorID(id int64) *ShopPriceCreate {
	spc.mutation.SetAuthorID(id)
	return spc
}

// SetNillableAuthorID sets the "author" edge to the TwitchUser entity by ID if the given value is not nil.
func (spc *ShopPriceCreate) SetNillableAuthorID(id *int64) *ShopPriceCreate {
	if id != nil {
		spc = spc.SetAuthorID(*id)
	}
	return spc
}

// SetAuthor sets the "author" edge to the TwitchUser entity.
func (spc *ShopPriceCreate) SetAuthor(t *TwitchUser) *ShopPriceCreate {
	return spc.SetAuthorID(t.ID)
}

// Mutation returns the ShopPriceMutation object of the builder.
func (spc *ShopPriceCreate) Mutation() *ShopPriceMutation {
	return spc.mutation
}

// Save creates the ShopPrice in the database.
func (spc *ShopPriceCreate) Save(ctx context.Context) (*ShopPrice, error) {
	var (
		err  error
		node *ShopPrice
	)
	spc.defaults()
	if len(spc.hooks) == 0 {
		if err = spc.check(); err != nil {
			return nil, err
		}
		node, err = spc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShopPriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spc.check(); err != nil {
				return nil, err
			}
			spc.mutation = mutation
			if node, err = spc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(spc.hooks) - 1; i >= 0; i-- {
			if spc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, spc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ShopPrice)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ShopPriceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spc *ShopPriceCreate) SaveX(ctx context.Context) *ShopPrice {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *ShopPriceCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *ShopPriceCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *ShopPriceCreate) defaults() {
	if _, ok := spc.mutation.Created(); !ok {
		v := shopprice.DefaultCreated()
		spc.mutation.SetCreated(v)
	}
	if _, ok := spc.mutation.Anonymous(); !ok {
		v := shopprice.DefaultAnonymous
		spc.mutation.SetAnonymous(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *ShopPriceCreate) check() error {
	if _, ok := spc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "ShopPrice.created"`)}
	}
	if _, ok := spc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "ShopPrice.price"`)}
	}
	if _, ok := spc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "ShopPrice.currency"`)}
	}
	if v, ok := spc.mutation.Currency(); ok {
		if err := shopprice.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "ShopPrice.currency": %w`, err)}
		}
	}
	if _, ok := spc.mutation.PriceType(); !ok {
		return &ValidationError{Name: "price_type", err: errors.New(`ent: missing required field "ShopPrice.price_type"`)}
	}
	if v, ok := spc.mutation.PriceType(); ok {
		if err := shopprice.PriceTypeValidator(v); err != nil {
			return &ValidationError{Name: "price_type", err: fmt.Errorf(`ent: validator failed for field "ShopPrice.price_type": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Anonymous(); !ok {
		return &ValidationError{Name: "anonymous", err: errors.New(`ent: missing required field "ShopPrice.anonymous"`)}
	}
	return nil
}

func (spc *ShopPriceCreate) sqlSave(ctx context.Context) (*ShopPrice, error) {
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (spc *ShopPriceCreate) createSpec() (*ShopPrice, *sqlgraph.CreateSpec) {
	var (
		_node = &ShopPrice{config: spc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shopprice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: shopprice.FieldID,
			},
		}
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spc.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shopprice.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := spc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: shopprice.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := spc.mutation.Currency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shopprice.FieldCurrency,
		})
		_node.Currency = value
	}
	if value, ok := spc.mutation.PriceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shopprice.FieldPriceType,
		})
		_node.PriceType = value
	}
	if value, ok := spc.mutation.Anonymous(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shopprice.FieldAnonymous,
		})
		_node.Anonymous = value
	}
	if nodes := spc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.ShopTable,
			Columns: []string{shopprice.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.kebab_shop_user_prices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.AuthorTable,
			Columns: []string{shopprice.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.twitch_user_user_prices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShopPriceCreateBulk is the builder for creating many ShopPrice entities in bulk.
type ShopPriceCreateBulk struct {
	config
	builders []*ShopPriceCreate
}

// Save creates the ShopPrice entities in the database.
func (spcb *ShopPriceCreateBulk) Save(ctx context.Context) ([]*ShopPrice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*ShopPrice, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShopPriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *ShopPriceCreateBulk) SaveX(ctx context.Context) []*ShopPrice {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *ShopPriceCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *ShopPriceCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
