// Code generated by ent, DO NOT EDIT.

package shopprice

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the shopprice type in the database.
	Label = "shop_price"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldPriceType holds the string denoting the price_type field in the database.
	FieldPriceType = "price_type"
	// FieldAnonymous holds the string denoting the anonymous field in the database.
	FieldAnonymous = "anonymous"
	// EdgeShop holds the string denoting the shop edge name in mutations.
	EdgeShop = "shop"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// Table holds the table name of the shopprice in the database.
	Table = "shop_prices"
	// ShopTable is the table that holds the shop relation/edge.
	ShopTable = "shop_prices"
	// ShopInverseTable is the table name for the KebabShop entity.
	// It exists in this package in order to avoid circular dependency with the "kebabshop" package.
	ShopInverseTable = "kebab_shops"
	// ShopColumn is the table column denoting the shop relation/edge.
	ShopColumn = "kebab_shop_user_prices"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "shop_prices"
	// AuthorInverseTable is the table name for the TwitchUser entity.
	// It exists in this package in order to avoid circular dependency with the "twitchuser" package.
	AuthorInverseTable = "twitch_users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "twitch_user_user_prices"
)

// Columns holds all SQL columns for shopprice fields.
var Columns = []string{
	FieldID,
	FieldCreated,
	FieldPrice,
	FieldCurrency,
	FieldPriceType,
	FieldAnonymous,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "shop_prices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"kebab_shop_user_prices",
	"twitch_user_user_prices",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() time.Time
	// DefaultAnonymous holds the default value on creation for the "anonymous" field.
	DefaultAnonymous bool
)

// Currency defines the type for the "currency" enum field.
type Currency string

// Currency values.
const (
	CurrencyEuro               Currency = "EUR"
	CurrencySwissFranc         Currency = "CHF"
	CurrencyJapaneseYen        Currency = "JPY"
	CurrencySwedishKrona       Currency = "SEK"
	CurrencyDanishKrone        Currency = "DDK"
	CurrencyUnitedStatesDollar Currency = "USD"
	CurrencyGreatBritishPound  Currency = "GBP"
)

func (c Currency) String() string {
	return string(c)
}

// CurrencyValidator is a validator for the "currency" field enum values. It is called by the builders before save.
func CurrencyValidator(c Currency) error {
	switch c {
	case CurrencyEuro, CurrencySwissFranc, CurrencyJapaneseYen, CurrencySwedishKrona, CurrencyDanishKrone, CurrencyUnitedStatesDollar, CurrencyGreatBritishPound:
		return nil
	default:
		return fmt.Errorf("shopprice: invalid enum value for currency field: %q", c)
	}
}

// PriceType defines the type for the "price_type" enum field.
type PriceType string

// PriceType values.
const (
	PriceTypeNormalKebab     PriceType = "normalKebab"
	PriceTypeVegetarianKebab PriceType = "vegiKebab"
)

func (pt PriceType) String() string {
	return string(pt)
}

// PriceTypeValidator is a validator for the "price_type" field enum values. It is called by the builders before save.
func PriceTypeValidator(pt PriceType) error {
	switch pt {
	case PriceTypeNormalKebab, PriceTypeVegetarianKebab:
		return nil
	default:
		return fmt.Errorf("shopprice: invalid enum value for price_type field: %q", pt)
	}
}
