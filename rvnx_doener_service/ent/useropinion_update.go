// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rvnx_doener_service/ent/kebabshop"
	"rvnx_doener_service/ent/predicate"
	"rvnx_doener_service/ent/twitchuser"
	"rvnx_doener_service/ent/useropinion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserOpinionUpdate is the builder for updating UserOpinion entities.
type UserOpinionUpdate struct {
	config
	hooks    []Hook
	mutation *UserOpinionMutation
}

// Where appends a list predicates to the UserOpinionUpdate builder.
func (uou *UserOpinionUpdate) Where(ps ...predicate.UserOpinion) *UserOpinionUpdate {
	uou.mutation.Where(ps...)
	return uou
}

// SetOpinion sets the "opinion" field.
func (uou *UserOpinionUpdate) SetOpinion(s string) *UserOpinionUpdate {
	uou.mutation.SetOpinion(s)
	return uou
}

// SetAnonymous sets the "anonymous" field.
func (uou *UserOpinionUpdate) SetAnonymous(b bool) *UserOpinionUpdate {
	uou.mutation.SetAnonymous(b)
	return uou
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (uou *UserOpinionUpdate) SetNillableAnonymous(b *bool) *UserOpinionUpdate {
	if b != nil {
		uou.SetAnonymous(*b)
	}
	return uou
}

// SetShopID sets the "shop" edge to the KebabShop entity by ID.
func (uou *UserOpinionUpdate) SetShopID(id uint64) *UserOpinionUpdate {
	uou.mutation.SetShopID(id)
	return uou
}

// SetNillableShopID sets the "shop" edge to the KebabShop entity by ID if the given value is not nil.
func (uou *UserOpinionUpdate) SetNillableShopID(id *uint64) *UserOpinionUpdate {
	if id != nil {
		uou = uou.SetShopID(*id)
	}
	return uou
}

// SetShop sets the "shop" edge to the KebabShop entity.
func (uou *UserOpinionUpdate) SetShop(k *KebabShop) *UserOpinionUpdate {
	return uou.SetShopID(k.ID)
}

// SetAuthorID sets the "author" edge to the TwitchUser entity by ID.
func (uou *UserOpinionUpdate) SetAuthorID(id int64) *UserOpinionUpdate {
	uou.mutation.SetAuthorID(id)
	return uou
}

// SetNillableAuthorID sets the "author" edge to the TwitchUser entity by ID if the given value is not nil.
func (uou *UserOpinionUpdate) SetNillableAuthorID(id *int64) *UserOpinionUpdate {
	if id != nil {
		uou = uou.SetAuthorID(*id)
	}
	return uou
}

// SetAuthor sets the "author" edge to the TwitchUser entity.
func (uou *UserOpinionUpdate) SetAuthor(t *TwitchUser) *UserOpinionUpdate {
	return uou.SetAuthorID(t.ID)
}

// Mutation returns the UserOpinionMutation object of the builder.
func (uou *UserOpinionUpdate) Mutation() *UserOpinionMutation {
	return uou.mutation
}

// ClearShop clears the "shop" edge to the KebabShop entity.
func (uou *UserOpinionUpdate) ClearShop() *UserOpinionUpdate {
	uou.mutation.ClearShop()
	return uou
}

// ClearAuthor clears the "author" edge to the TwitchUser entity.
func (uou *UserOpinionUpdate) ClearAuthor() *UserOpinionUpdate {
	uou.mutation.ClearAuthor()
	return uou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uou *UserOpinionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uou.hooks) == 0 {
		if err = uou.check(); err != nil {
			return 0, err
		}
		affected, err = uou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserOpinionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uou.check(); err != nil {
				return 0, err
			}
			uou.mutation = mutation
			affected, err = uou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uou.hooks) - 1; i >= 0; i-- {
			if uou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uou *UserOpinionUpdate) SaveX(ctx context.Context) int {
	affected, err := uou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uou *UserOpinionUpdate) Exec(ctx context.Context) error {
	_, err := uou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uou *UserOpinionUpdate) ExecX(ctx context.Context) {
	if err := uou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uou *UserOpinionUpdate) check() error {
	if v, ok := uou.mutation.Opinion(); ok {
		if err := useropinion.OpinionValidator(v); err != nil {
			return &ValidationError{Name: "opinion", err: fmt.Errorf(`ent: validator failed for field "UserOpinion.opinion": %w`, err)}
		}
	}
	return nil
}

func (uou *UserOpinionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useropinion.Table,
			Columns: useropinion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: useropinion.FieldID,
			},
		},
	}
	if ps := uou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uou.mutation.Opinion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useropinion.FieldOpinion,
		})
	}
	if value, ok := uou.mutation.Anonymous(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: useropinion.FieldAnonymous,
		})
	}
	if uou.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useropinion.ShopTable,
			Columns: []string{useropinion.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uou.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useropinion.ShopTable,
			Columns: []string{useropinion.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uou.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useropinion.AuthorTable,
			Columns: []string{useropinion.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uou.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useropinion.AuthorTable,
			Columns: []string{useropinion.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useropinion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserOpinionUpdateOne is the builder for updating a single UserOpinion entity.
type UserOpinionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserOpinionMutation
}

// SetOpinion sets the "opinion" field.
func (uouo *UserOpinionUpdateOne) SetOpinion(s string) *UserOpinionUpdateOne {
	uouo.mutation.SetOpinion(s)
	return uouo
}

// SetAnonymous sets the "anonymous" field.
func (uouo *UserOpinionUpdateOne) SetAnonymous(b bool) *UserOpinionUpdateOne {
	uouo.mutation.SetAnonymous(b)
	return uouo
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (uouo *UserOpinionUpdateOne) SetNillableAnonymous(b *bool) *UserOpinionUpdateOne {
	if b != nil {
		uouo.SetAnonymous(*b)
	}
	return uouo
}

// SetShopID sets the "shop" edge to the KebabShop entity by ID.
func (uouo *UserOpinionUpdateOne) SetShopID(id uint64) *UserOpinionUpdateOne {
	uouo.mutation.SetShopID(id)
	return uouo
}

// SetNillableShopID sets the "shop" edge to the KebabShop entity by ID if the given value is not nil.
func (uouo *UserOpinionUpdateOne) SetNillableShopID(id *uint64) *UserOpinionUpdateOne {
	if id != nil {
		uouo = uouo.SetShopID(*id)
	}
	return uouo
}

// SetShop sets the "shop" edge to the KebabShop entity.
func (uouo *UserOpinionUpdateOne) SetShop(k *KebabShop) *UserOpinionUpdateOne {
	return uouo.SetShopID(k.ID)
}

// SetAuthorID sets the "author" edge to the TwitchUser entity by ID.
func (uouo *UserOpinionUpdateOne) SetAuthorID(id int64) *UserOpinionUpdateOne {
	uouo.mutation.SetAuthorID(id)
	return uouo
}

// SetNillableAuthorID sets the "author" edge to the TwitchUser entity by ID if the given value is not nil.
func (uouo *UserOpinionUpdateOne) SetNillableAuthorID(id *int64) *UserOpinionUpdateOne {
	if id != nil {
		uouo = uouo.SetAuthorID(*id)
	}
	return uouo
}

// SetAuthor sets the "author" edge to the TwitchUser entity.
func (uouo *UserOpinionUpdateOne) SetAuthor(t *TwitchUser) *UserOpinionUpdateOne {
	return uouo.SetAuthorID(t.ID)
}

// Mutation returns the UserOpinionMutation object of the builder.
func (uouo *UserOpinionUpdateOne) Mutation() *UserOpinionMutation {
	return uouo.mutation
}

// ClearShop clears the "shop" edge to the KebabShop entity.
func (uouo *UserOpinionUpdateOne) ClearShop() *UserOpinionUpdateOne {
	uouo.mutation.ClearShop()
	return uouo
}

// ClearAuthor clears the "author" edge to the TwitchUser entity.
func (uouo *UserOpinionUpdateOne) ClearAuthor() *UserOpinionUpdateOne {
	uouo.mutation.ClearAuthor()
	return uouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uouo *UserOpinionUpdateOne) Select(field string, fields ...string) *UserOpinionUpdateOne {
	uouo.fields = append([]string{field}, fields...)
	return uouo
}

// Save executes the query and returns the updated UserOpinion entity.
func (uouo *UserOpinionUpdateOne) Save(ctx context.Context) (*UserOpinion, error) {
	var (
		err  error
		node *UserOpinion
	)
	if len(uouo.hooks) == 0 {
		if err = uouo.check(); err != nil {
			return nil, err
		}
		node, err = uouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserOpinionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uouo.check(); err != nil {
				return nil, err
			}
			uouo.mutation = mutation
			node, err = uouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uouo.hooks) - 1; i >= 0; i-- {
			if uouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserOpinion)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserOpinionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uouo *UserOpinionUpdateOne) SaveX(ctx context.Context) *UserOpinion {
	node, err := uouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uouo *UserOpinionUpdateOne) Exec(ctx context.Context) error {
	_, err := uouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uouo *UserOpinionUpdateOne) ExecX(ctx context.Context) {
	if err := uouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uouo *UserOpinionUpdateOne) check() error {
	if v, ok := uouo.mutation.Opinion(); ok {
		if err := useropinion.OpinionValidator(v); err != nil {
			return &ValidationError{Name: "opinion", err: fmt.Errorf(`ent: validator failed for field "UserOpinion.opinion": %w`, err)}
		}
	}
	return nil
}

func (uouo *UserOpinionUpdateOne) sqlSave(ctx context.Context) (_node *UserOpinion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useropinion.Table,
			Columns: useropinion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: useropinion.FieldID,
			},
		},
	}
	id, ok := uouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserOpinion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useropinion.FieldID)
		for _, f := range fields {
			if !useropinion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useropinion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uouo.mutation.Opinion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useropinion.FieldOpinion,
		})
	}
	if value, ok := uouo.mutation.Anonymous(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: useropinion.FieldAnonymous,
		})
	}
	if uouo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useropinion.ShopTable,
			Columns: []string{useropinion.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uouo.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useropinion.ShopTable,
			Columns: []string{useropinion.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uouo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useropinion.AuthorTable,
			Columns: []string{useropinion.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uouo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useropinion.AuthorTable,
			Columns: []string{useropinion.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserOpinion{config: uouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useropinion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
