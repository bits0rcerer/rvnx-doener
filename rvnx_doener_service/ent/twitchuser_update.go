// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rvnx_doener_service/ent/predicate"
	"rvnx_doener_service/ent/scorerating"
	"rvnx_doener_service/ent/shopprice"
	"rvnx_doener_service/ent/twitchuser"
	"rvnx_doener_service/ent/useropinion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TwitchUserUpdate is the builder for updating TwitchUser entities.
type TwitchUserUpdate struct {
	config
	hooks    []Hook
	mutation *TwitchUserMutation
}

// Where appends a list predicates to the TwitchUserUpdate builder.
func (tuu *TwitchUserUpdate) Where(ps ...predicate.TwitchUser) *TwitchUserUpdate {
	tuu.mutation.Where(ps...)
	return tuu
}

// SetLogin sets the "login" field.
func (tuu *TwitchUserUpdate) SetLogin(s string) *TwitchUserUpdate {
	tuu.mutation.SetLogin(s)
	return tuu
}

// SetEmail sets the "email" field.
func (tuu *TwitchUserUpdate) SetEmail(s string) *TwitchUserUpdate {
	tuu.mutation.SetEmail(s)
	return tuu
}

// SetDisplayName sets the "display_name" field.
func (tuu *TwitchUserUpdate) SetDisplayName(s string) *TwitchUserUpdate {
	tuu.mutation.SetDisplayName(s)
	return tuu
}

// SetCreatedAt sets the "created_at" field.
func (tuu *TwitchUserUpdate) SetCreatedAt(t time.Time) *TwitchUserUpdate {
	tuu.mutation.SetCreatedAt(t)
	return tuu
}

// SetOauthToken sets the "oauth_token" field.
func (tuu *TwitchUserUpdate) SetOauthToken(s string) *TwitchUserUpdate {
	tuu.mutation.SetOauthToken(s)
	return tuu
}

// SetOauthRefreshToken sets the "oauth_refresh_token" field.
func (tuu *TwitchUserUpdate) SetOauthRefreshToken(s string) *TwitchUserUpdate {
	tuu.mutation.SetOauthRefreshToken(s)
	return tuu
}

// SetActivated sets the "activated" field.
func (tuu *TwitchUserUpdate) SetActivated(b bool) *TwitchUserUpdate {
	tuu.mutation.SetActivated(b)
	return tuu
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (tuu *TwitchUserUpdate) SetNillableActivated(b *bool) *TwitchUserUpdate {
	if b != nil {
		tuu.SetActivated(*b)
	}
	return tuu
}

// AddScoreRatingIDs adds the "score_ratings" edge to the ScoreRating entity by IDs.
func (tuu *TwitchUserUpdate) AddScoreRatingIDs(ids ...uint64) *TwitchUserUpdate {
	tuu.mutation.AddScoreRatingIDs(ids...)
	return tuu
}

// AddScoreRatings adds the "score_ratings" edges to the ScoreRating entity.
func (tuu *TwitchUserUpdate) AddScoreRatings(s ...*ScoreRating) *TwitchUserUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuu.AddScoreRatingIDs(ids...)
}

// AddUserPriceIDs adds the "user_prices" edge to the ShopPrice entity by IDs.
func (tuu *TwitchUserUpdate) AddUserPriceIDs(ids ...uint64) *TwitchUserUpdate {
	tuu.mutation.AddUserPriceIDs(ids...)
	return tuu
}

// AddUserPrices adds the "user_prices" edges to the ShopPrice entity.
func (tuu *TwitchUserUpdate) AddUserPrices(s ...*ShopPrice) *TwitchUserUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuu.AddUserPriceIDs(ids...)
}

// AddUserOpinionIDs adds the "user_opinions" edge to the UserOpinion entity by IDs.
func (tuu *TwitchUserUpdate) AddUserOpinionIDs(ids ...uint64) *TwitchUserUpdate {
	tuu.mutation.AddUserOpinionIDs(ids...)
	return tuu
}

// AddUserOpinions adds the "user_opinions" edges to the UserOpinion entity.
func (tuu *TwitchUserUpdate) AddUserOpinions(u ...*UserOpinion) *TwitchUserUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuu.AddUserOpinionIDs(ids...)
}

// Mutation returns the TwitchUserMutation object of the builder.
func (tuu *TwitchUserUpdate) Mutation() *TwitchUserMutation {
	return tuu.mutation
}

// ClearScoreRatings clears all "score_ratings" edges to the ScoreRating entity.
func (tuu *TwitchUserUpdate) ClearScoreRatings() *TwitchUserUpdate {
	tuu.mutation.ClearScoreRatings()
	return tuu
}

// RemoveScoreRatingIDs removes the "score_ratings" edge to ScoreRating entities by IDs.
func (tuu *TwitchUserUpdate) RemoveScoreRatingIDs(ids ...uint64) *TwitchUserUpdate {
	tuu.mutation.RemoveScoreRatingIDs(ids...)
	return tuu
}

// RemoveScoreRatings removes "score_ratings" edges to ScoreRating entities.
func (tuu *TwitchUserUpdate) RemoveScoreRatings(s ...*ScoreRating) *TwitchUserUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuu.RemoveScoreRatingIDs(ids...)
}

// ClearUserPrices clears all "user_prices" edges to the ShopPrice entity.
func (tuu *TwitchUserUpdate) ClearUserPrices() *TwitchUserUpdate {
	tuu.mutation.ClearUserPrices()
	return tuu
}

// RemoveUserPriceIDs removes the "user_prices" edge to ShopPrice entities by IDs.
func (tuu *TwitchUserUpdate) RemoveUserPriceIDs(ids ...uint64) *TwitchUserUpdate {
	tuu.mutation.RemoveUserPriceIDs(ids...)
	return tuu
}

// RemoveUserPrices removes "user_prices" edges to ShopPrice entities.
func (tuu *TwitchUserUpdate) RemoveUserPrices(s ...*ShopPrice) *TwitchUserUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuu.RemoveUserPriceIDs(ids...)
}

// ClearUserOpinions clears all "user_opinions" edges to the UserOpinion entity.
func (tuu *TwitchUserUpdate) ClearUserOpinions() *TwitchUserUpdate {
	tuu.mutation.ClearUserOpinions()
	return tuu
}

// RemoveUserOpinionIDs removes the "user_opinions" edge to UserOpinion entities by IDs.
func (tuu *TwitchUserUpdate) RemoveUserOpinionIDs(ids ...uint64) *TwitchUserUpdate {
	tuu.mutation.RemoveUserOpinionIDs(ids...)
	return tuu
}

// RemoveUserOpinions removes "user_opinions" edges to UserOpinion entities.
func (tuu *TwitchUserUpdate) RemoveUserOpinions(u ...*UserOpinion) *TwitchUserUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuu.RemoveUserOpinionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuu *TwitchUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tuu.hooks) == 0 {
		affected, err = tuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TwitchUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuu.mutation = mutation
			affected, err = tuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tuu.hooks) - 1; i >= 0; i-- {
			if tuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuu *TwitchUserUpdate) SaveX(ctx context.Context) int {
	affected, err := tuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuu *TwitchUserUpdate) Exec(ctx context.Context) error {
	_, err := tuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuu *TwitchUserUpdate) ExecX(ctx context.Context) {
	if err := tuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuu *TwitchUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   twitchuser.Table,
			Columns: twitchuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: twitchuser.FieldID,
			},
		},
	}
	if ps := tuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuu.mutation.Login(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldLogin,
		})
	}
	if value, ok := tuu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldEmail,
		})
	}
	if value, ok := tuu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldDisplayName,
		})
	}
	if value, ok := tuu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: twitchuser.FieldCreatedAt,
		})
	}
	if value, ok := tuu.mutation.OauthToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldOauthToken,
		})
	}
	if value, ok := tuu.mutation.OauthRefreshToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldOauthRefreshToken,
		})
	}
	if value, ok := tuu.mutation.Activated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: twitchuser.FieldActivated,
		})
	}
	if tuu.mutation.ScoreRatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.ScoreRatingsTable,
			Columns: []string{twitchuser.ScoreRatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: scorerating.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedScoreRatingsIDs(); len(nodes) > 0 && !tuu.mutation.ScoreRatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.ScoreRatingsTable,
			Columns: []string{twitchuser.ScoreRatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: scorerating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.ScoreRatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.ScoreRatingsTable,
			Columns: []string{twitchuser.ScoreRatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: scorerating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuu.mutation.UserPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserPricesTable,
			Columns: []string{twitchuser.UserPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shopprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedUserPricesIDs(); len(nodes) > 0 && !tuu.mutation.UserPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserPricesTable,
			Columns: []string{twitchuser.UserPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shopprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.UserPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserPricesTable,
			Columns: []string{twitchuser.UserPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shopprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuu.mutation.UserOpinionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserOpinionsTable,
			Columns: []string{twitchuser.UserOpinionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: useropinion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedUserOpinionsIDs(); len(nodes) > 0 && !tuu.mutation.UserOpinionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserOpinionsTable,
			Columns: []string{twitchuser.UserOpinionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: useropinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.UserOpinionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserOpinionsTable,
			Columns: []string{twitchuser.UserOpinionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: useropinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitchuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TwitchUserUpdateOne is the builder for updating a single TwitchUser entity.
type TwitchUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TwitchUserMutation
}

// SetLogin sets the "login" field.
func (tuuo *TwitchUserUpdateOne) SetLogin(s string) *TwitchUserUpdateOne {
	tuuo.mutation.SetLogin(s)
	return tuuo
}

// SetEmail sets the "email" field.
func (tuuo *TwitchUserUpdateOne) SetEmail(s string) *TwitchUserUpdateOne {
	tuuo.mutation.SetEmail(s)
	return tuuo
}

// SetDisplayName sets the "display_name" field.
func (tuuo *TwitchUserUpdateOne) SetDisplayName(s string) *TwitchUserUpdateOne {
	tuuo.mutation.SetDisplayName(s)
	return tuuo
}

// SetCreatedAt sets the "created_at" field.
func (tuuo *TwitchUserUpdateOne) SetCreatedAt(t time.Time) *TwitchUserUpdateOne {
	tuuo.mutation.SetCreatedAt(t)
	return tuuo
}

// SetOauthToken sets the "oauth_token" field.
func (tuuo *TwitchUserUpdateOne) SetOauthToken(s string) *TwitchUserUpdateOne {
	tuuo.mutation.SetOauthToken(s)
	return tuuo
}

// SetOauthRefreshToken sets the "oauth_refresh_token" field.
func (tuuo *TwitchUserUpdateOne) SetOauthRefreshToken(s string) *TwitchUserUpdateOne {
	tuuo.mutation.SetOauthRefreshToken(s)
	return tuuo
}

// SetActivated sets the "activated" field.
func (tuuo *TwitchUserUpdateOne) SetActivated(b bool) *TwitchUserUpdateOne {
	tuuo.mutation.SetActivated(b)
	return tuuo
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (tuuo *TwitchUserUpdateOne) SetNillableActivated(b *bool) *TwitchUserUpdateOne {
	if b != nil {
		tuuo.SetActivated(*b)
	}
	return tuuo
}

// AddScoreRatingIDs adds the "score_ratings" edge to the ScoreRating entity by IDs.
func (tuuo *TwitchUserUpdateOne) AddScoreRatingIDs(ids ...uint64) *TwitchUserUpdateOne {
	tuuo.mutation.AddScoreRatingIDs(ids...)
	return tuuo
}

// AddScoreRatings adds the "score_ratings" edges to the ScoreRating entity.
func (tuuo *TwitchUserUpdateOne) AddScoreRatings(s ...*ScoreRating) *TwitchUserUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuuo.AddScoreRatingIDs(ids...)
}

// AddUserPriceIDs adds the "user_prices" edge to the ShopPrice entity by IDs.
func (tuuo *TwitchUserUpdateOne) AddUserPriceIDs(ids ...uint64) *TwitchUserUpdateOne {
	tuuo.mutation.AddUserPriceIDs(ids...)
	return tuuo
}

// AddUserPrices adds the "user_prices" edges to the ShopPrice entity.
func (tuuo *TwitchUserUpdateOne) AddUserPrices(s ...*ShopPrice) *TwitchUserUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuuo.AddUserPriceIDs(ids...)
}

// AddUserOpinionIDs adds the "user_opinions" edge to the UserOpinion entity by IDs.
func (tuuo *TwitchUserUpdateOne) AddUserOpinionIDs(ids ...uint64) *TwitchUserUpdateOne {
	tuuo.mutation.AddUserOpinionIDs(ids...)
	return tuuo
}

// AddUserOpinions adds the "user_opinions" edges to the UserOpinion entity.
func (tuuo *TwitchUserUpdateOne) AddUserOpinions(u ...*UserOpinion) *TwitchUserUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuuo.AddUserOpinionIDs(ids...)
}

// Mutation returns the TwitchUserMutation object of the builder.
func (tuuo *TwitchUserUpdateOne) Mutation() *TwitchUserMutation {
	return tuuo.mutation
}

// ClearScoreRatings clears all "score_ratings" edges to the ScoreRating entity.
func (tuuo *TwitchUserUpdateOne) ClearScoreRatings() *TwitchUserUpdateOne {
	tuuo.mutation.ClearScoreRatings()
	return tuuo
}

// RemoveScoreRatingIDs removes the "score_ratings" edge to ScoreRating entities by IDs.
func (tuuo *TwitchUserUpdateOne) RemoveScoreRatingIDs(ids ...uint64) *TwitchUserUpdateOne {
	tuuo.mutation.RemoveScoreRatingIDs(ids...)
	return tuuo
}

// RemoveScoreRatings removes "score_ratings" edges to ScoreRating entities.
func (tuuo *TwitchUserUpdateOne) RemoveScoreRatings(s ...*ScoreRating) *TwitchUserUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuuo.RemoveScoreRatingIDs(ids...)
}

// ClearUserPrices clears all "user_prices" edges to the ShopPrice entity.
func (tuuo *TwitchUserUpdateOne) ClearUserPrices() *TwitchUserUpdateOne {
	tuuo.mutation.ClearUserPrices()
	return tuuo
}

// RemoveUserPriceIDs removes the "user_prices" edge to ShopPrice entities by IDs.
func (tuuo *TwitchUserUpdateOne) RemoveUserPriceIDs(ids ...uint64) *TwitchUserUpdateOne {
	tuuo.mutation.RemoveUserPriceIDs(ids...)
	return tuuo
}

// RemoveUserPrices removes "user_prices" edges to ShopPrice entities.
func (tuuo *TwitchUserUpdateOne) RemoveUserPrices(s ...*ShopPrice) *TwitchUserUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuuo.RemoveUserPriceIDs(ids...)
}

// ClearUserOpinions clears all "user_opinions" edges to the UserOpinion entity.
func (tuuo *TwitchUserUpdateOne) ClearUserOpinions() *TwitchUserUpdateOne {
	tuuo.mutation.ClearUserOpinions()
	return tuuo
}

// RemoveUserOpinionIDs removes the "user_opinions" edge to UserOpinion entities by IDs.
func (tuuo *TwitchUserUpdateOne) RemoveUserOpinionIDs(ids ...uint64) *TwitchUserUpdateOne {
	tuuo.mutation.RemoveUserOpinionIDs(ids...)
	return tuuo
}

// RemoveUserOpinions removes "user_opinions" edges to UserOpinion entities.
func (tuuo *TwitchUserUpdateOne) RemoveUserOpinions(u ...*UserOpinion) *TwitchUserUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuuo.RemoveUserOpinionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuuo *TwitchUserUpdateOne) Select(field string, fields ...string) *TwitchUserUpdateOne {
	tuuo.fields = append([]string{field}, fields...)
	return tuuo
}

// Save executes the query and returns the updated TwitchUser entity.
func (tuuo *TwitchUserUpdateOne) Save(ctx context.Context) (*TwitchUser, error) {
	var (
		err  error
		node *TwitchUser
	)
	if len(tuuo.hooks) == 0 {
		node, err = tuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TwitchUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuuo.mutation = mutation
			node, err = tuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuuo.hooks) - 1; i >= 0; i-- {
			if tuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TwitchUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TwitchUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuuo *TwitchUserUpdateOne) SaveX(ctx context.Context) *TwitchUser {
	node, err := tuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuuo *TwitchUserUpdateOne) Exec(ctx context.Context) error {
	_, err := tuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuuo *TwitchUserUpdateOne) ExecX(ctx context.Context) {
	if err := tuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuuo *TwitchUserUpdateOne) sqlSave(ctx context.Context) (_node *TwitchUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   twitchuser.Table,
			Columns: twitchuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: twitchuser.FieldID,
			},
		},
	}
	id, ok := tuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TwitchUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twitchuser.FieldID)
		for _, f := range fields {
			if !twitchuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != twitchuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuuo.mutation.Login(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldLogin,
		})
	}
	if value, ok := tuuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldEmail,
		})
	}
	if value, ok := tuuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldDisplayName,
		})
	}
	if value, ok := tuuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: twitchuser.FieldCreatedAt,
		})
	}
	if value, ok := tuuo.mutation.OauthToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldOauthToken,
		})
	}
	if value, ok := tuuo.mutation.OauthRefreshToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: twitchuser.FieldOauthRefreshToken,
		})
	}
	if value, ok := tuuo.mutation.Activated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: twitchuser.FieldActivated,
		})
	}
	if tuuo.mutation.ScoreRatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.ScoreRatingsTable,
			Columns: []string{twitchuser.ScoreRatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: scorerating.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedScoreRatingsIDs(); len(nodes) > 0 && !tuuo.mutation.ScoreRatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.ScoreRatingsTable,
			Columns: []string{twitchuser.ScoreRatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: scorerating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.ScoreRatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.ScoreRatingsTable,
			Columns: []string{twitchuser.ScoreRatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: scorerating.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuuo.mutation.UserPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserPricesTable,
			Columns: []string{twitchuser.UserPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shopprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedUserPricesIDs(); len(nodes) > 0 && !tuuo.mutation.UserPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserPricesTable,
			Columns: []string{twitchuser.UserPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shopprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.UserPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserPricesTable,
			Columns: []string{twitchuser.UserPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shopprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuuo.mutation.UserOpinionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserOpinionsTable,
			Columns: []string{twitchuser.UserOpinionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: useropinion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedUserOpinionsIDs(); len(nodes) > 0 && !tuuo.mutation.UserOpinionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserOpinionsTable,
			Columns: []string{twitchuser.UserOpinionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: useropinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.UserOpinionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   twitchuser.UserOpinionsTable,
			Columns: []string{twitchuser.UserOpinionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: useropinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TwitchUser{config: tuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitchuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
