// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"rvnx_doener_service/ent/kebabshop"
	"rvnx_doener_service/ent/predicate"
	"rvnx_doener_service/ent/scorerating"
	"rvnx_doener_service/ent/shopprice"
	"rvnx_doener_service/ent/twitchuser"
	"rvnx_doener_service/ent/useropinion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KebabShopQuery is the builder for querying KebabShop entities.
type KebabShopQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.KebabShop
	// eager-loading edges.
	withUserScores   *ScoreRatingQuery
	withUserPrices   *ShopPriceQuery
	withUserOpinions *UserOpinionQuery
	withSubmittedBy  *TwitchUserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KebabShopQuery builder.
func (ksq *KebabShopQuery) Where(ps ...predicate.KebabShop) *KebabShopQuery {
	ksq.predicates = append(ksq.predicates, ps...)
	return ksq
}

// Limit adds a limit step to the query.
func (ksq *KebabShopQuery) Limit(limit int) *KebabShopQuery {
	ksq.limit = &limit
	return ksq
}

// Offset adds an offset step to the query.
func (ksq *KebabShopQuery) Offset(offset int) *KebabShopQuery {
	ksq.offset = &offset
	return ksq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ksq *KebabShopQuery) Unique(unique bool) *KebabShopQuery {
	ksq.unique = &unique
	return ksq
}

// Order adds an order step to the query.
func (ksq *KebabShopQuery) Order(o ...OrderFunc) *KebabShopQuery {
	ksq.order = append(ksq.order, o...)
	return ksq
}

// QueryUserScores chains the current query on the "user_scores" edge.
func (ksq *KebabShopQuery) QueryUserScores() *ScoreRatingQuery {
	query := &ScoreRatingQuery{config: ksq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ksq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ksq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kebabshop.Table, kebabshop.FieldID, selector),
			sqlgraph.To(scorerating.Table, scorerating.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kebabshop.UserScoresTable, kebabshop.UserScoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(ksq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserPrices chains the current query on the "user_prices" edge.
func (ksq *KebabShopQuery) QueryUserPrices() *ShopPriceQuery {
	query := &ShopPriceQuery{config: ksq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ksq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ksq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kebabshop.Table, kebabshop.FieldID, selector),
			sqlgraph.To(shopprice.Table, shopprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kebabshop.UserPricesTable, kebabshop.UserPricesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ksq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserOpinions chains the current query on the "user_opinions" edge.
func (ksq *KebabShopQuery) QueryUserOpinions() *UserOpinionQuery {
	query := &UserOpinionQuery{config: ksq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ksq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ksq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kebabshop.Table, kebabshop.FieldID, selector),
			sqlgraph.To(useropinion.Table, useropinion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kebabshop.UserOpinionsTable, kebabshop.UserOpinionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ksq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubmittedBy chains the current query on the "submitted_by" edge.
func (ksq *KebabShopQuery) QuerySubmittedBy() *TwitchUserQuery {
	query := &TwitchUserQuery{config: ksq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ksq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ksq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kebabshop.Table, kebabshop.FieldID, selector),
			sqlgraph.To(twitchuser.Table, twitchuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, kebabshop.SubmittedByTable, kebabshop.SubmittedByPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ksq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KebabShop entity from the query.
// Returns a *NotFoundError when no KebabShop was found.
func (ksq *KebabShopQuery) First(ctx context.Context) (*KebabShop, error) {
	nodes, err := ksq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kebabshop.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ksq *KebabShopQuery) FirstX(ctx context.Context) *KebabShop {
	node, err := ksq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KebabShop ID from the query.
// Returns a *NotFoundError when no KebabShop ID was found.
func (ksq *KebabShopQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ksq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kebabshop.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ksq *KebabShopQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ksq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KebabShop entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KebabShop entity is found.
// Returns a *NotFoundError when no KebabShop entities are found.
func (ksq *KebabShopQuery) Only(ctx context.Context) (*KebabShop, error) {
	nodes, err := ksq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kebabshop.Label}
	default:
		return nil, &NotSingularError{kebabshop.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ksq *KebabShopQuery) OnlyX(ctx context.Context) *KebabShop {
	node, err := ksq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KebabShop ID in the query.
// Returns a *NotSingularError when more than one KebabShop ID is found.
// Returns a *NotFoundError when no entities are found.
func (ksq *KebabShopQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ksq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kebabshop.Label}
	default:
		err = &NotSingularError{kebabshop.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ksq *KebabShopQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ksq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KebabShops.
func (ksq *KebabShopQuery) All(ctx context.Context) ([]*KebabShop, error) {
	if err := ksq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ksq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ksq *KebabShopQuery) AllX(ctx context.Context) []*KebabShop {
	nodes, err := ksq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KebabShop IDs.
func (ksq *KebabShopQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := ksq.Select(kebabshop.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ksq *KebabShopQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ksq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ksq *KebabShopQuery) Count(ctx context.Context) (int, error) {
	if err := ksq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ksq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ksq *KebabShopQuery) CountX(ctx context.Context) int {
	count, err := ksq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ksq *KebabShopQuery) Exist(ctx context.Context) (bool, error) {
	if err := ksq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ksq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ksq *KebabShopQuery) ExistX(ctx context.Context) bool {
	exist, err := ksq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KebabShopQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ksq *KebabShopQuery) Clone() *KebabShopQuery {
	if ksq == nil {
		return nil
	}
	return &KebabShopQuery{
		config:           ksq.config,
		limit:            ksq.limit,
		offset:           ksq.offset,
		order:            append([]OrderFunc{}, ksq.order...),
		predicates:       append([]predicate.KebabShop{}, ksq.predicates...),
		withUserScores:   ksq.withUserScores.Clone(),
		withUserPrices:   ksq.withUserPrices.Clone(),
		withUserOpinions: ksq.withUserOpinions.Clone(),
		withSubmittedBy:  ksq.withSubmittedBy.Clone(),
		// clone intermediate query.
		sql:    ksq.sql.Clone(),
		path:   ksq.path,
		unique: ksq.unique,
	}
}

// WithUserScores tells the query-builder to eager-load the nodes that are connected to
// the "user_scores" edge. The optional arguments are used to configure the query builder of the edge.
func (ksq *KebabShopQuery) WithUserScores(opts ...func(*ScoreRatingQuery)) *KebabShopQuery {
	query := &ScoreRatingQuery{config: ksq.config}
	for _, opt := range opts {
		opt(query)
	}
	ksq.withUserScores = query
	return ksq
}

// WithUserPrices tells the query-builder to eager-load the nodes that are connected to
// the "user_prices" edge. The optional arguments are used to configure the query builder of the edge.
func (ksq *KebabShopQuery) WithUserPrices(opts ...func(*ShopPriceQuery)) *KebabShopQuery {
	query := &ShopPriceQuery{config: ksq.config}
	for _, opt := range opts {
		opt(query)
	}
	ksq.withUserPrices = query
	return ksq
}

// WithUserOpinions tells the query-builder to eager-load the nodes that are connected to
// the "user_opinions" edge. The optional arguments are used to configure the query builder of the edge.
func (ksq *KebabShopQuery) WithUserOpinions(opts ...func(*UserOpinionQuery)) *KebabShopQuery {
	query := &UserOpinionQuery{config: ksq.config}
	for _, opt := range opts {
		opt(query)
	}
	ksq.withUserOpinions = query
	return ksq
}

// WithSubmittedBy tells the query-builder to eager-load the nodes that are connected to
// the "submitted_by" edge. The optional arguments are used to configure the query builder of the edge.
func (ksq *KebabShopQuery) WithSubmittedBy(opts ...func(*TwitchUserQuery)) *KebabShopQuery {
	query := &TwitchUserQuery{config: ksq.config}
	for _, opt := range opts {
		opt(query)
	}
	ksq.withSubmittedBy = query
	return ksq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OsmID int `json:"osm_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KebabShop.Query().
//		GroupBy(kebabshop.FieldOsmID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ksq *KebabShopQuery) GroupBy(field string, fields ...string) *KebabShopGroupBy {
	grbuild := &KebabShopGroupBy{config: ksq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ksq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ksq.sqlQuery(ctx), nil
	}
	grbuild.label = kebabshop.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OsmID int `json:"osm_id,omitempty"`
//	}
//
//	client.KebabShop.Query().
//		Select(kebabshop.FieldOsmID).
//		Scan(ctx, &v)
func (ksq *KebabShopQuery) Select(fields ...string) *KebabShopSelect {
	ksq.fields = append(ksq.fields, fields...)
	selbuild := &KebabShopSelect{KebabShopQuery: ksq}
	selbuild.label = kebabshop.Label
	selbuild.flds, selbuild.scan = &ksq.fields, selbuild.Scan
	return selbuild
}

func (ksq *KebabShopQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ksq.fields {
		if !kebabshop.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ksq.path != nil {
		prev, err := ksq.path(ctx)
		if err != nil {
			return err
		}
		ksq.sql = prev
	}
	return nil
}

func (ksq *KebabShopQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KebabShop, error) {
	var (
		nodes       = []*KebabShop{}
		_spec       = ksq.querySpec()
		loadedTypes = [4]bool{
			ksq.withUserScores != nil,
			ksq.withUserPrices != nil,
			ksq.withUserOpinions != nil,
			ksq.withSubmittedBy != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*KebabShop).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &KebabShop{config: ksq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ksq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ksq.withUserScores; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*KebabShop)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserScores = []*ScoreRating{}
		}
		query.withFKs = true
		query.Where(predicate.ScoreRating(func(s *sql.Selector) {
			s.Where(sql.InValues(kebabshop.UserScoresColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.kebab_shop_user_scores
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "kebab_shop_user_scores" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "kebab_shop_user_scores" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.UserScores = append(node.Edges.UserScores, n)
		}
	}

	if query := ksq.withUserPrices; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*KebabShop)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserPrices = []*ShopPrice{}
		}
		query.withFKs = true
		query.Where(predicate.ShopPrice(func(s *sql.Selector) {
			s.Where(sql.InValues(kebabshop.UserPricesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.kebab_shop_user_prices
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "kebab_shop_user_prices" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "kebab_shop_user_prices" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.UserPrices = append(node.Edges.UserPrices, n)
		}
	}

	if query := ksq.withUserOpinions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*KebabShop)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserOpinions = []*UserOpinion{}
		}
		query.withFKs = true
		query.Where(predicate.UserOpinion(func(s *sql.Selector) {
			s.Where(sql.InValues(kebabshop.UserOpinionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.kebab_shop_user_opinions
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "kebab_shop_user_opinions" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "kebab_shop_user_opinions" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.UserOpinions = append(node.Edges.UserOpinions, n)
		}
	}

	if query := ksq.withSubmittedBy; query != nil {
		edgeids := make([]driver.Value, len(nodes))
		byid := make(map[uint64]*KebabShop)
		nids := make(map[int64]map[*KebabShop]struct{})
		for i, node := range nodes {
			edgeids[i] = node.ID
			byid[node.ID] = node
			node.Edges.SubmittedBy = []*TwitchUser{}
		}
		query.Where(func(s *sql.Selector) {
			joinT := sql.Table(kebabshop.SubmittedByTable)
			s.Join(joinT).On(s.C(twitchuser.FieldID), joinT.C(kebabshop.SubmittedByPrimaryKey[0]))
			s.Where(sql.InValues(joinT.C(kebabshop.SubmittedByPrimaryKey[1]), edgeids...))
			columns := s.SelectedColumns()
			s.Select(joinT.C(kebabshop.SubmittedByPrimaryKey[1]))
			s.AppendSelect(columns...)
			s.SetDistinct(false)
		})
		neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]interface{}, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]interface{}{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []interface{}) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*KebabShop]struct{}{byid[outValue]: struct{}{}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byid[outValue]] = struct{}{}
				return nil
			}
		})
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "submitted_by" node returned %v`, n.ID)
			}
			for kn := range nodes {
				kn.Edges.SubmittedBy = append(kn.Edges.SubmittedBy, n)
			}
		}
	}

	return nodes, nil
}

func (ksq *KebabShopQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ksq.querySpec()
	_spec.Node.Columns = ksq.fields
	if len(ksq.fields) > 0 {
		_spec.Unique = ksq.unique != nil && *ksq.unique
	}
	return sqlgraph.CountNodes(ctx, ksq.driver, _spec)
}

func (ksq *KebabShopQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ksq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ksq *KebabShopQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kebabshop.Table,
			Columns: kebabshop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: kebabshop.FieldID,
			},
		},
		From:   ksq.sql,
		Unique: true,
	}
	if unique := ksq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ksq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kebabshop.FieldID)
		for i := range fields {
			if fields[i] != kebabshop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ksq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ksq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ksq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ksq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ksq *KebabShopQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ksq.driver.Dialect())
	t1 := builder.Table(kebabshop.Table)
	columns := ksq.fields
	if len(columns) == 0 {
		columns = kebabshop.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ksq.sql != nil {
		selector = ksq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ksq.unique != nil && *ksq.unique {
		selector.Distinct()
	}
	for _, p := range ksq.predicates {
		p(selector)
	}
	for _, p := range ksq.order {
		p(selector)
	}
	if offset := ksq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ksq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KebabShopGroupBy is the group-by builder for KebabShop entities.
type KebabShopGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ksgb *KebabShopGroupBy) Aggregate(fns ...AggregateFunc) *KebabShopGroupBy {
	ksgb.fns = append(ksgb.fns, fns...)
	return ksgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ksgb *KebabShopGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ksgb.path(ctx)
	if err != nil {
		return err
	}
	ksgb.sql = query
	return ksgb.sqlScan(ctx, v)
}

func (ksgb *KebabShopGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ksgb.fields {
		if !kebabshop.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ksgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ksgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ksgb *KebabShopGroupBy) sqlQuery() *sql.Selector {
	selector := ksgb.sql.Select()
	aggregation := make([]string, 0, len(ksgb.fns))
	for _, fn := range ksgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ksgb.fields)+len(ksgb.fns))
		for _, f := range ksgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ksgb.fields...)...)
}

// KebabShopSelect is the builder for selecting fields of KebabShop entities.
type KebabShopSelect struct {
	*KebabShopQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (kss *KebabShopSelect) Scan(ctx context.Context, v interface{}) error {
	if err := kss.prepareQuery(ctx); err != nil {
		return err
	}
	kss.sql = kss.KebabShopQuery.sqlQuery(ctx)
	return kss.sqlScan(ctx, v)
}

func (kss *KebabShopSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := kss.sql.Query()
	if err := kss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
