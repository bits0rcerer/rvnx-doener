// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rvnx_doener_service/ent/kebabshop"
	"rvnx_doener_service/ent/twitchuser"
	"rvnx_doener_service/ent/useropinion"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserOpinion is the model entity for the UserOpinion schema.
type UserOpinion struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Opinion holds the value of the "opinion" field.
	Opinion string `json:"opinion,omitempty"`
	// Anonymous holds the value of the "anonymous" field.
	Anonymous bool `json:"anonymous,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserOpinionQuery when eager-loading is set.
	Edges                     UserOpinionEdges `json:"edges"`
	kebab_shop_user_opinions  *uint64
	twitch_user_user_opinions *int64
}

// UserOpinionEdges holds the relations/edges for other nodes in the graph.
type UserOpinionEdges struct {
	// Shop holds the value of the shop edge.
	Shop *KebabShop `json:"shop,omitempty"`
	// Author holds the value of the author edge.
	Author *TwitchUser `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ShopOrErr returns the Shop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserOpinionEdges) ShopOrErr() (*KebabShop, error) {
	if e.loadedTypes[0] {
		if e.Shop == nil {
			// The edge shop was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kebabshop.Label}
		}
		return e.Shop, nil
	}
	return nil, &NotLoadedError{edge: "shop"}
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserOpinionEdges) AuthorOrErr() (*TwitchUser, error) {
	if e.loadedTypes[1] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: twitchuser.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserOpinion) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case useropinion.FieldAnonymous:
			values[i] = new(sql.NullBool)
		case useropinion.FieldID:
			values[i] = new(sql.NullInt64)
		case useropinion.FieldOpinion:
			values[i] = new(sql.NullString)
		case useropinion.FieldCreated:
			values[i] = new(sql.NullTime)
		case useropinion.ForeignKeys[0]: // kebab_shop_user_opinions
			values[i] = new(sql.NullInt64)
		case useropinion.ForeignKeys[1]: // twitch_user_user_opinions
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserOpinion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserOpinion fields.
func (uo *UserOpinion) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useropinion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uo.ID = uint64(value.Int64)
		case useropinion.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				uo.Created = value.Time
			}
		case useropinion.FieldOpinion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field opinion", values[i])
			} else if value.Valid {
				uo.Opinion = value.String
			}
		case useropinion.FieldAnonymous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous", values[i])
			} else if value.Valid {
				uo.Anonymous = value.Bool
			}
		case useropinion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kebab_shop_user_opinions", value)
			} else if value.Valid {
				uo.kebab_shop_user_opinions = new(uint64)
				*uo.kebab_shop_user_opinions = uint64(value.Int64)
			}
		case useropinion.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field twitch_user_user_opinions", value)
			} else if value.Valid {
				uo.twitch_user_user_opinions = new(int64)
				*uo.twitch_user_user_opinions = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryShop queries the "shop" edge of the UserOpinion entity.
func (uo *UserOpinion) QueryShop() *KebabShopQuery {
	return (&UserOpinionClient{config: uo.config}).QueryShop(uo)
}

// QueryAuthor queries the "author" edge of the UserOpinion entity.
func (uo *UserOpinion) QueryAuthor() *TwitchUserQuery {
	return (&UserOpinionClient{config: uo.config}).QueryAuthor(uo)
}

// Update returns a builder for updating this UserOpinion.
// Note that you need to call UserOpinion.Unwrap() before calling this method if this UserOpinion
// was returned from a transaction, and the transaction was committed or rolled back.
func (uo *UserOpinion) Update() *UserOpinionUpdateOne {
	return (&UserOpinionClient{config: uo.config}).UpdateOne(uo)
}

// Unwrap unwraps the UserOpinion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uo *UserOpinion) Unwrap() *UserOpinion {
	_tx, ok := uo.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserOpinion is not a transactional entity")
	}
	uo.config.driver = _tx.drv
	return uo
}

// String implements the fmt.Stringer.
func (uo *UserOpinion) String() string {
	var builder strings.Builder
	builder.WriteString("UserOpinion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uo.ID))
	builder.WriteString("created=")
	builder.WriteString(uo.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("opinion=")
	builder.WriteString(uo.Opinion)
	builder.WriteString(", ")
	builder.WriteString("anonymous=")
	builder.WriteString(fmt.Sprintf("%v", uo.Anonymous))
	builder.WriteByte(')')
	return builder.String()
}

// UserOpinions is a parsable slice of UserOpinion.
type UserOpinions []*UserOpinion

func (uo UserOpinions) config(cfg config) {
	for _i := range uo {
		uo[_i].config = cfg
	}
}
