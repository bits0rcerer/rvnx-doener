// Code generated by ent, DO NOT EDIT.

package kebabshop

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the kebabshop type in the database.
	Label = "kebab_shop"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOsmID holds the string denoting the osm_id field in the database.
	FieldOsmID = "osm_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldVisible holds the string denoting the visible field in the database.
	FieldVisible = "visible"
	// FieldPostedAnonymously holds the string denoting the posted_anonymously field in the database.
	FieldPostedAnonymously = "posted_anonymously"
	// EdgeUserScores holds the string denoting the user_scores edge name in mutations.
	EdgeUserScores = "user_scores"
	// EdgeUserPrices holds the string denoting the user_prices edge name in mutations.
	EdgeUserPrices = "user_prices"
	// EdgeUserOpinions holds the string denoting the user_opinions edge name in mutations.
	EdgeUserOpinions = "user_opinions"
	// EdgeSubmittedBy holds the string denoting the submitted_by edge name in mutations.
	EdgeSubmittedBy = "submitted_by"
	// Table holds the table name of the kebabshop in the database.
	Table = "kebab_shops"
	// UserScoresTable is the table that holds the user_scores relation/edge.
	UserScoresTable = "score_ratings"
	// UserScoresInverseTable is the table name for the ScoreRating entity.
	// It exists in this package in order to avoid circular dependency with the "scorerating" package.
	UserScoresInverseTable = "score_ratings"
	// UserScoresColumn is the table column denoting the user_scores relation/edge.
	UserScoresColumn = "kebab_shop_user_scores"
	// UserPricesTable is the table that holds the user_prices relation/edge.
	UserPricesTable = "shop_prices"
	// UserPricesInverseTable is the table name for the ShopPrice entity.
	// It exists in this package in order to avoid circular dependency with the "shopprice" package.
	UserPricesInverseTable = "shop_prices"
	// UserPricesColumn is the table column denoting the user_prices relation/edge.
	UserPricesColumn = "kebab_shop_user_prices"
	// UserOpinionsTable is the table that holds the user_opinions relation/edge.
	UserOpinionsTable = "user_opinions"
	// UserOpinionsInverseTable is the table name for the UserOpinion entity.
	// It exists in this package in order to avoid circular dependency with the "useropinion" package.
	UserOpinionsInverseTable = "user_opinions"
	// UserOpinionsColumn is the table column denoting the user_opinions relation/edge.
	UserOpinionsColumn = "kebab_shop_user_opinions"
	// SubmittedByTable is the table that holds the submitted_by relation/edge. The primary key declared below.
	SubmittedByTable = "twitch_user_submitted"
	// SubmittedByInverseTable is the table name for the TwitchUser entity.
	// It exists in this package in order to avoid circular dependency with the "twitchuser" package.
	SubmittedByInverseTable = "twitch_users"
)

// Columns holds all SQL columns for kebabshop fields.
var Columns = []string{
	FieldID,
	FieldOsmID,
	FieldName,
	FieldCreated,
	FieldLat,
	FieldLng,
	FieldVisible,
	FieldPostedAnonymously,
}

var (
	// SubmittedByPrimaryKey and SubmittedByColumn2 are the table columns denoting the
	// primary key for the submitted_by relation (M2M).
	SubmittedByPrimaryKey = []string{"twitch_user_id", "kebab_shop_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "rvnx_doener_service/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() time.Time
	// DefaultVisible holds the default value on creation for the "visible" field.
	DefaultVisible bool
)
