// Code generated by ent, DO NOT EDIT.

package scorerating

import (
	"time"
)

const (
	// Label holds the string label denoting the scorerating type in the database.
	Label = "score_rating"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldAnonymous holds the string denoting the anonymous field in the database.
	FieldAnonymous = "anonymous"
	// EdgeShop holds the string denoting the shop edge name in mutations.
	EdgeShop = "shop"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// Table holds the table name of the scorerating in the database.
	Table = "score_ratings"
	// ShopTable is the table that holds the shop relation/edge.
	ShopTable = "score_ratings"
	// ShopInverseTable is the table name for the KebabShop entity.
	// It exists in this package in order to avoid circular dependency with the "kebabshop" package.
	ShopInverseTable = "kebab_shops"
	// ShopColumn is the table column denoting the shop relation/edge.
	ShopColumn = "kebab_shop_user_scores"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "score_ratings"
	// AuthorInverseTable is the table name for the TwitchUser entity.
	// It exists in this package in order to avoid circular dependency with the "twitchuser" package.
	AuthorInverseTable = "twitch_users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "twitch_user_score_ratings"
)

// Columns holds all SQL columns for scorerating fields.
var Columns = []string{
	FieldID,
	FieldCreated,
	FieldScore,
	FieldAnonymous,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "score_ratings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"kebab_shop_user_scores",
	"twitch_user_score_ratings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() time.Time
	// ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	ScoreValidator func(float64) error
	// DefaultAnonymous holds the default value on creation for the "anonymous" field.
	DefaultAnonymous bool
)
