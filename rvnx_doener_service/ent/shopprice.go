// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rvnx_doener_service/ent/kebabshop"
	"rvnx_doener_service/ent/shopprice"
	"rvnx_doener_service/ent/twitchuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jackc/pgtype"
)

// ShopPrice is the model entity for the ShopPrice schema.
type ShopPrice struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Price holds the value of the "price" field.
	Price *pgtype.Numeric `json:"price,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency shopprice.Currency `json:"currency,omitempty"`
	// PriceType holds the value of the "price_type" field.
	PriceType shopprice.PriceType `json:"price_type,omitempty"`
	// Anonymous holds the value of the "anonymous" field.
	Anonymous bool `json:"anonymous,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShopPriceQuery when eager-loading is set.
	Edges                   ShopPriceEdges `json:"edges"`
	kebab_shop_user_prices  *uint64
	twitch_user_user_prices *int64
}

// ShopPriceEdges holds the relations/edges for other nodes in the graph.
type ShopPriceEdges struct {
	// Shop holds the value of the shop edge.
	Shop *KebabShop `json:"shop,omitempty"`
	// Author holds the value of the author edge.
	Author *TwitchUser `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ShopOrErr returns the Shop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShopPriceEdges) ShopOrErr() (*KebabShop, error) {
	if e.loadedTypes[0] {
		if e.Shop == nil {
			// The edge shop was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kebabshop.Label}
		}
		return e.Shop, nil
	}
	return nil, &NotLoadedError{edge: "shop"}
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShopPriceEdges) AuthorOrErr() (*TwitchUser, error) {
	if e.loadedTypes[1] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: twitchuser.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShopPrice) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shopprice.FieldPrice:
			values[i] = new(pgtype.Numeric)
		case shopprice.FieldAnonymous:
			values[i] = new(sql.NullBool)
		case shopprice.FieldID:
			values[i] = new(sql.NullInt64)
		case shopprice.FieldCurrency, shopprice.FieldPriceType:
			values[i] = new(sql.NullString)
		case shopprice.FieldCreated:
			values[i] = new(sql.NullTime)
		case shopprice.ForeignKeys[0]: // kebab_shop_user_prices
			values[i] = new(sql.NullInt64)
		case shopprice.ForeignKeys[1]: // twitch_user_user_prices
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShopPrice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShopPrice fields.
func (sp *ShopPrice) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shopprice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = uint64(value.Int64)
		case shopprice.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				sp.Created = value.Time
			}
		case shopprice.FieldPrice:
			if value, ok := values[i].(*pgtype.Numeric); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value != nil {
				sp.Price = value
			}
		case shopprice.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				sp.Currency = shopprice.Currency(value.String)
			}
		case shopprice.FieldPriceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_type", values[i])
			} else if value.Valid {
				sp.PriceType = shopprice.PriceType(value.String)
			}
		case shopprice.FieldAnonymous:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous", values[i])
			} else if value.Valid {
				sp.Anonymous = value.Bool
			}
		case shopprice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kebab_shop_user_prices", value)
			} else if value.Valid {
				sp.kebab_shop_user_prices = new(uint64)
				*sp.kebab_shop_user_prices = uint64(value.Int64)
			}
		case shopprice.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field twitch_user_user_prices", value)
			} else if value.Valid {
				sp.twitch_user_user_prices = new(int64)
				*sp.twitch_user_user_prices = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryShop queries the "shop" edge of the ShopPrice entity.
func (sp *ShopPrice) QueryShop() *KebabShopQuery {
	return (&ShopPriceClient{config: sp.config}).QueryShop(sp)
}

// QueryAuthor queries the "author" edge of the ShopPrice entity.
func (sp *ShopPrice) QueryAuthor() *TwitchUserQuery {
	return (&ShopPriceClient{config: sp.config}).QueryAuthor(sp)
}

// Update returns a builder for updating this ShopPrice.
// Note that you need to call ShopPrice.Unwrap() before calling this method if this ShopPrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *ShopPrice) Update() *ShopPriceUpdateOne {
	return (&ShopPriceClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the ShopPrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *ShopPrice) Unwrap() *ShopPrice {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShopPrice is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *ShopPrice) String() string {
	var builder strings.Builder
	builder.WriteString("ShopPrice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("created=")
	builder.WriteString(sp.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", sp.Price))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(fmt.Sprintf("%v", sp.Currency))
	builder.WriteString(", ")
	builder.WriteString("price_type=")
	builder.WriteString(fmt.Sprintf("%v", sp.PriceType))
	builder.WriteString(", ")
	builder.WriteString("anonymous=")
	builder.WriteString(fmt.Sprintf("%v", sp.Anonymous))
	builder.WriteByte(')')
	return builder.String()
}

// ShopPrices is a parsable slice of ShopPrice.
type ShopPrices []*ShopPrice

func (sp ShopPrices) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
