// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rvnx_doener_service/ent/kebabshop"
	"rvnx_doener_service/ent/predicate"
	"rvnx_doener_service/ent/shopprice"
	"rvnx_doener_service/ent/twitchuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jackc/pgtype"
)

// ShopPriceUpdate is the builder for updating ShopPrice entities.
type ShopPriceUpdate struct {
	config
	hooks    []Hook
	mutation *ShopPriceMutation
}

// Where appends a list predicates to the ShopPriceUpdate builder.
func (spu *ShopPriceUpdate) Where(ps ...predicate.ShopPrice) *ShopPriceUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetPrice sets the "price" field.
func (spu *ShopPriceUpdate) SetPrice(pg *pgtype.Numeric) *ShopPriceUpdate {
	spu.mutation.SetPrice(pg)
	return spu
}

// SetCurrency sets the "currency" field.
func (spu *ShopPriceUpdate) SetCurrency(s shopprice.Currency) *ShopPriceUpdate {
	spu.mutation.SetCurrency(s)
	return spu
}

// SetPriceType sets the "price_type" field.
func (spu *ShopPriceUpdate) SetPriceType(st shopprice.PriceType) *ShopPriceUpdate {
	spu.mutation.SetPriceType(st)
	return spu
}

// SetAnonymous sets the "anonymous" field.
func (spu *ShopPriceUpdate) SetAnonymous(b bool) *ShopPriceUpdate {
	spu.mutation.SetAnonymous(b)
	return spu
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (spu *ShopPriceUpdate) SetNillableAnonymous(b *bool) *ShopPriceUpdate {
	if b != nil {
		spu.SetAnonymous(*b)
	}
	return spu
}

// SetShopID sets the "shop" edge to the KebabShop entity by ID.
func (spu *ShopPriceUpdate) SetShopID(id uint64) *ShopPriceUpdate {
	spu.mutation.SetShopID(id)
	return spu
}

// SetNillableShopID sets the "shop" edge to the KebabShop entity by ID if the given value is not nil.
func (spu *ShopPriceUpdate) SetNillableShopID(id *uint64) *ShopPriceUpdate {
	if id != nil {
		spu = spu.SetShopID(*id)
	}
	return spu
}

// SetShop sets the "shop" edge to the KebabShop entity.
func (spu *ShopPriceUpdate) SetShop(k *KebabShop) *ShopPriceUpdate {
	return spu.SetShopID(k.ID)
}

// SetAuthorID sets the "author" edge to the TwitchUser entity by ID.
func (spu *ShopPriceUpdate) SetAuthorID(id int64) *ShopPriceUpdate {
	spu.mutation.SetAuthorID(id)
	return spu
}

// SetNillableAuthorID sets the "author" edge to the TwitchUser entity by ID if the given value is not nil.
func (spu *ShopPriceUpdate) SetNillableAuthorID(id *int64) *ShopPriceUpdate {
	if id != nil {
		spu = spu.SetAuthorID(*id)
	}
	return spu
}

// SetAuthor sets the "author" edge to the TwitchUser entity.
func (spu *ShopPriceUpdate) SetAuthor(t *TwitchUser) *ShopPriceUpdate {
	return spu.SetAuthorID(t.ID)
}

// Mutation returns the ShopPriceMutation object of the builder.
func (spu *ShopPriceUpdate) Mutation() *ShopPriceMutation {
	return spu.mutation
}

// ClearShop clears the "shop" edge to the KebabShop entity.
func (spu *ShopPriceUpdate) ClearShop() *ShopPriceUpdate {
	spu.mutation.ClearShop()
	return spu
}

// ClearAuthor clears the "author" edge to the TwitchUser entity.
func (spu *ShopPriceUpdate) ClearAuthor() *ShopPriceUpdate {
	spu.mutation.ClearAuthor()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *ShopPriceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(spu.hooks) == 0 {
		if err = spu.check(); err != nil {
			return 0, err
		}
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShopPriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spu.check(); err != nil {
				return 0, err
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			if spu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *ShopPriceUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *ShopPriceUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *ShopPriceUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *ShopPriceUpdate) check() error {
	if v, ok := spu.mutation.Currency(); ok {
		if err := shopprice.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "ShopPrice.currency": %w`, err)}
		}
	}
	if v, ok := spu.mutation.PriceType(); ok {
		if err := shopprice.PriceTypeValidator(v); err != nil {
			return &ValidationError{Name: "price_type", err: fmt.Errorf(`ent: validator failed for field "ShopPrice.price_type": %w`, err)}
		}
	}
	return nil
}

func (spu *ShopPriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shopprice.Table,
			Columns: shopprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: shopprice.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: shopprice.FieldPrice,
		})
	}
	if value, ok := spu.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shopprice.FieldCurrency,
		})
	}
	if value, ok := spu.mutation.PriceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shopprice.FieldPriceType,
		})
	}
	if value, ok := spu.mutation.Anonymous(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shopprice.FieldAnonymous,
		})
	}
	if spu.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.ShopTable,
			Columns: []string{shopprice.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.ShopTable,
			Columns: []string{shopprice.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.AuthorTable,
			Columns: []string{shopprice.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.AuthorTable,
			Columns: []string{shopprice.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shopprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ShopPriceUpdateOne is the builder for updating a single ShopPrice entity.
type ShopPriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShopPriceMutation
}

// SetPrice sets the "price" field.
func (spuo *ShopPriceUpdateOne) SetPrice(pg *pgtype.Numeric) *ShopPriceUpdateOne {
	spuo.mutation.SetPrice(pg)
	return spuo
}

// SetCurrency sets the "currency" field.
func (spuo *ShopPriceUpdateOne) SetCurrency(s shopprice.Currency) *ShopPriceUpdateOne {
	spuo.mutation.SetCurrency(s)
	return spuo
}

// SetPriceType sets the "price_type" field.
func (spuo *ShopPriceUpdateOne) SetPriceType(st shopprice.PriceType) *ShopPriceUpdateOne {
	spuo.mutation.SetPriceType(st)
	return spuo
}

// SetAnonymous sets the "anonymous" field.
func (spuo *ShopPriceUpdateOne) SetAnonymous(b bool) *ShopPriceUpdateOne {
	spuo.mutation.SetAnonymous(b)
	return spuo
}

// SetNillableAnonymous sets the "anonymous" field if the given value is not nil.
func (spuo *ShopPriceUpdateOne) SetNillableAnonymous(b *bool) *ShopPriceUpdateOne {
	if b != nil {
		spuo.SetAnonymous(*b)
	}
	return spuo
}

// SetShopID sets the "shop" edge to the KebabShop entity by ID.
func (spuo *ShopPriceUpdateOne) SetShopID(id uint64) *ShopPriceUpdateOne {
	spuo.mutation.SetShopID(id)
	return spuo
}

// SetNillableShopID sets the "shop" edge to the KebabShop entity by ID if the given value is not nil.
func (spuo *ShopPriceUpdateOne) SetNillableShopID(id *uint64) *ShopPriceUpdateOne {
	if id != nil {
		spuo = spuo.SetShopID(*id)
	}
	return spuo
}

// SetShop sets the "shop" edge to the KebabShop entity.
func (spuo *ShopPriceUpdateOne) SetShop(k *KebabShop) *ShopPriceUpdateOne {
	return spuo.SetShopID(k.ID)
}

// SetAuthorID sets the "author" edge to the TwitchUser entity by ID.
func (spuo *ShopPriceUpdateOne) SetAuthorID(id int64) *ShopPriceUpdateOne {
	spuo.mutation.SetAuthorID(id)
	return spuo
}

// SetNillableAuthorID sets the "author" edge to the TwitchUser entity by ID if the given value is not nil.
func (spuo *ShopPriceUpdateOne) SetNillableAuthorID(id *int64) *ShopPriceUpdateOne {
	if id != nil {
		spuo = spuo.SetAuthorID(*id)
	}
	return spuo
}

// SetAuthor sets the "author" edge to the TwitchUser entity.
func (spuo *ShopPriceUpdateOne) SetAuthor(t *TwitchUser) *ShopPriceUpdateOne {
	return spuo.SetAuthorID(t.ID)
}

// Mutation returns the ShopPriceMutation object of the builder.
func (spuo *ShopPriceUpdateOne) Mutation() *ShopPriceMutation {
	return spuo.mutation
}

// ClearShop clears the "shop" edge to the KebabShop entity.
func (spuo *ShopPriceUpdateOne) ClearShop() *ShopPriceUpdateOne {
	spuo.mutation.ClearShop()
	return spuo
}

// ClearAuthor clears the "author" edge to the TwitchUser entity.
func (spuo *ShopPriceUpdateOne) ClearAuthor() *ShopPriceUpdateOne {
	spuo.mutation.ClearAuthor()
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *ShopPriceUpdateOne) Select(field string, fields ...string) *ShopPriceUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated ShopPrice entity.
func (spuo *ShopPriceUpdateOne) Save(ctx context.Context) (*ShopPrice, error) {
	var (
		err  error
		node *ShopPrice
	)
	if len(spuo.hooks) == 0 {
		if err = spuo.check(); err != nil {
			return nil, err
		}
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShopPriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spuo.check(); err != nil {
				return nil, err
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			if spuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, spuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ShopPrice)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ShopPriceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *ShopPriceUpdateOne) SaveX(ctx context.Context) *ShopPrice {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *ShopPriceUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *ShopPriceUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *ShopPriceUpdateOne) check() error {
	if v, ok := spuo.mutation.Currency(); ok {
		if err := shopprice.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "ShopPrice.currency": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.PriceType(); ok {
		if err := shopprice.PriceTypeValidator(v); err != nil {
			return &ValidationError{Name: "price_type", err: fmt.Errorf(`ent: validator failed for field "ShopPrice.price_type": %w`, err)}
		}
	}
	return nil
}

func (spuo *ShopPriceUpdateOne) sqlSave(ctx context.Context) (_node *ShopPrice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shopprice.Table,
			Columns: shopprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: shopprice.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShopPrice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shopprice.FieldID)
		for _, f := range fields {
			if !shopprice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shopprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: shopprice.FieldPrice,
		})
	}
	if value, ok := spuo.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shopprice.FieldCurrency,
		})
	}
	if value, ok := spuo.mutation.PriceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: shopprice.FieldPriceType,
		})
	}
	if value, ok := spuo.mutation.Anonymous(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shopprice.FieldAnonymous,
		})
	}
	if spuo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.ShopTable,
			Columns: []string{shopprice.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.ShopTable,
			Columns: []string{shopprice.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: kebabshop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.AuthorTable,
			Columns: []string{shopprice.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopprice.AuthorTable,
			Columns: []string{shopprice.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: twitchuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShopPrice{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shopprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
