// Code generated by ent, DO NOT EDIT.

package twitchuser

import (
	"rvnx_doener_service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Login applies equality check predicate on the "login" field. It's identical to LoginEQ.
func Login(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogin), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// OauthToken applies equality check predicate on the "oauth_token" field. It's identical to OauthTokenEQ.
func OauthToken(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthToken), v))
	})
}

// OauthRefreshToken applies equality check predicate on the "oauth_refresh_token" field. It's identical to OauthRefreshTokenEQ.
func OauthRefreshToken(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthRefreshToken), v))
	})
}

// Activated applies equality check predicate on the "activated" field. It's identical to ActivatedEQ.
func Activated(v bool) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivated), v))
	})
}

// LoginEQ applies the EQ predicate on the "login" field.
func LoginEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogin), v))
	})
}

// LoginNEQ applies the NEQ predicate on the "login" field.
func LoginNEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogin), v))
	})
}

// LoginIn applies the In predicate on the "login" field.
func LoginIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogin), v...))
	})
}

// LoginNotIn applies the NotIn predicate on the "login" field.
func LoginNotIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogin), v...))
	})
}

// LoginGT applies the GT predicate on the "login" field.
func LoginGT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogin), v))
	})
}

// LoginGTE applies the GTE predicate on the "login" field.
func LoginGTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogin), v))
	})
}

// LoginLT applies the LT predicate on the "login" field.
func LoginLT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogin), v))
	})
}

// LoginLTE applies the LTE predicate on the "login" field.
func LoginLTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogin), v))
	})
}

// LoginContains applies the Contains predicate on the "login" field.
func LoginContains(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogin), v))
	})
}

// LoginHasPrefix applies the HasPrefix predicate on the "login" field.
func LoginHasPrefix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogin), v))
	})
}

// LoginHasSuffix applies the HasSuffix predicate on the "login" field.
func LoginHasSuffix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogin), v))
	})
}

// LoginEqualFold applies the EqualFold predicate on the "login" field.
func LoginEqualFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogin), v))
	})
}

// LoginContainsFold applies the ContainsFold predicate on the "login" field.
func LoginContainsFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogin), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// OauthTokenEQ applies the EQ predicate on the "oauth_token" field.
func OauthTokenEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthToken), v))
	})
}

// OauthTokenNEQ applies the NEQ predicate on the "oauth_token" field.
func OauthTokenNEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOauthToken), v))
	})
}

// OauthTokenIn applies the In predicate on the "oauth_token" field.
func OauthTokenIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOauthToken), v...))
	})
}

// OauthTokenNotIn applies the NotIn predicate on the "oauth_token" field.
func OauthTokenNotIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOauthToken), v...))
	})
}

// OauthTokenGT applies the GT predicate on the "oauth_token" field.
func OauthTokenGT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOauthToken), v))
	})
}

// OauthTokenGTE applies the GTE predicate on the "oauth_token" field.
func OauthTokenGTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOauthToken), v))
	})
}

// OauthTokenLT applies the LT predicate on the "oauth_token" field.
func OauthTokenLT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOauthToken), v))
	})
}

// OauthTokenLTE applies the LTE predicate on the "oauth_token" field.
func OauthTokenLTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOauthToken), v))
	})
}

// OauthTokenContains applies the Contains predicate on the "oauth_token" field.
func OauthTokenContains(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOauthToken), v))
	})
}

// OauthTokenHasPrefix applies the HasPrefix predicate on the "oauth_token" field.
func OauthTokenHasPrefix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOauthToken), v))
	})
}

// OauthTokenHasSuffix applies the HasSuffix predicate on the "oauth_token" field.
func OauthTokenHasSuffix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOauthToken), v))
	})
}

// OauthTokenEqualFold applies the EqualFold predicate on the "oauth_token" field.
func OauthTokenEqualFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOauthToken), v))
	})
}

// OauthTokenContainsFold applies the ContainsFold predicate on the "oauth_token" field.
func OauthTokenContainsFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOauthToken), v))
	})
}

// OauthRefreshTokenEQ applies the EQ predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenNEQ applies the NEQ predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenNEQ(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenIn applies the In predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOauthRefreshToken), v...))
	})
}

// OauthRefreshTokenNotIn applies the NotIn predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenNotIn(vs ...string) predicate.TwitchUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TwitchUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOauthRefreshToken), v...))
	})
}

// OauthRefreshTokenGT applies the GT predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenGT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenGTE applies the GTE predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenGTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenLT applies the LT predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenLT(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenLTE applies the LTE predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenLTE(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenContains applies the Contains predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenContains(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenHasPrefix applies the HasPrefix predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenHasPrefix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenHasSuffix applies the HasSuffix predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenHasSuffix(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenEqualFold applies the EqualFold predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenEqualFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOauthRefreshToken), v))
	})
}

// OauthRefreshTokenContainsFold applies the ContainsFold predicate on the "oauth_refresh_token" field.
func OauthRefreshTokenContainsFold(v string) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOauthRefreshToken), v))
	})
}

// ActivatedEQ applies the EQ predicate on the "activated" field.
func ActivatedEQ(v bool) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivated), v))
	})
}

// ActivatedNEQ applies the NEQ predicate on the "activated" field.
func ActivatedNEQ(v bool) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivated), v))
	})
}

// HasScoreRatings applies the HasEdge predicate on the "score_ratings" edge.
func HasScoreRatings() predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScoreRatingsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScoreRatingsTable, ScoreRatingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScoreRatingsWith applies the HasEdge predicate on the "score_ratings" edge with a given conditions (other predicates).
func HasScoreRatingsWith(preds ...predicate.ScoreRating) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScoreRatingsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScoreRatingsTable, ScoreRatingsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserPrices applies the HasEdge predicate on the "user_prices" edge.
func HasUserPrices() predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserPricesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserPricesTable, UserPricesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserPricesWith applies the HasEdge predicate on the "user_prices" edge with a given conditions (other predicates).
func HasUserPricesWith(preds ...predicate.ShopPrice) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserPricesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserPricesTable, UserPricesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserOpinions applies the HasEdge predicate on the "user_opinions" edge.
func HasUserOpinions() predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserOpinionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserOpinionsTable, UserOpinionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserOpinionsWith applies the HasEdge predicate on the "user_opinions" edge with a given conditions (other predicates).
func HasUserOpinionsWith(preds ...predicate.UserOpinion) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserOpinionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserOpinionsTable, UserOpinionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubmitted applies the HasEdge predicate on the "submitted" edge.
func HasSubmitted() predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubmittedTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubmittedTable, SubmittedPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubmittedWith applies the HasEdge predicate on the "submitted" edge with a given conditions (other predicates).
func HasSubmittedWith(preds ...predicate.KebabShop) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubmittedInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubmittedTable, SubmittedPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TwitchUser) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TwitchUser) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TwitchUser) predicate.TwitchUser {
	return predicate.TwitchUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
