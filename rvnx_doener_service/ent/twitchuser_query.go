// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"rvnx_doener_service/ent/predicate"
	"rvnx_doener_service/ent/scorerating"
	"rvnx_doener_service/ent/shopprice"
	"rvnx_doener_service/ent/twitchuser"
	"rvnx_doener_service/ent/useropinion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TwitchUserQuery is the builder for querying TwitchUser entities.
type TwitchUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TwitchUser
	// eager-loading edges.
	withScoreRatings *ScoreRatingQuery
	withUserPrices   *ShopPriceQuery
	withUserOpinions *UserOpinionQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TwitchUserQuery builder.
func (tuq *TwitchUserQuery) Where(ps ...predicate.TwitchUser) *TwitchUserQuery {
	tuq.predicates = append(tuq.predicates, ps...)
	return tuq
}

// Limit adds a limit step to the query.
func (tuq *TwitchUserQuery) Limit(limit int) *TwitchUserQuery {
	tuq.limit = &limit
	return tuq
}

// Offset adds an offset step to the query.
func (tuq *TwitchUserQuery) Offset(offset int) *TwitchUserQuery {
	tuq.offset = &offset
	return tuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tuq *TwitchUserQuery) Unique(unique bool) *TwitchUserQuery {
	tuq.unique = &unique
	return tuq
}

// Order adds an order step to the query.
func (tuq *TwitchUserQuery) Order(o ...OrderFunc) *TwitchUserQuery {
	tuq.order = append(tuq.order, o...)
	return tuq
}

// QueryScoreRatings chains the current query on the "score_ratings" edge.
func (tuq *TwitchUserQuery) QueryScoreRatings() *ScoreRatingQuery {
	query := &ScoreRatingQuery{config: tuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(twitchuser.Table, twitchuser.FieldID, selector),
			sqlgraph.To(scorerating.Table, scorerating.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, twitchuser.ScoreRatingsTable, twitchuser.ScoreRatingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserPrices chains the current query on the "user_prices" edge.
func (tuq *TwitchUserQuery) QueryUserPrices() *ShopPriceQuery {
	query := &ShopPriceQuery{config: tuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(twitchuser.Table, twitchuser.FieldID, selector),
			sqlgraph.To(shopprice.Table, shopprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, twitchuser.UserPricesTable, twitchuser.UserPricesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserOpinions chains the current query on the "user_opinions" edge.
func (tuq *TwitchUserQuery) QueryUserOpinions() *UserOpinionQuery {
	query := &UserOpinionQuery{config: tuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(twitchuser.Table, twitchuser.FieldID, selector),
			sqlgraph.To(useropinion.Table, useropinion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, twitchuser.UserOpinionsTable, twitchuser.UserOpinionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TwitchUser entity from the query.
// Returns a *NotFoundError when no TwitchUser was found.
func (tuq *TwitchUserQuery) First(ctx context.Context) (*TwitchUser, error) {
	nodes, err := tuq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{twitchuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tuq *TwitchUserQuery) FirstX(ctx context.Context) *TwitchUser {
	node, err := tuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TwitchUser ID from the query.
// Returns a *NotFoundError when no TwitchUser ID was found.
func (tuq *TwitchUserQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = tuq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{twitchuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tuq *TwitchUserQuery) FirstIDX(ctx context.Context) int64 {
	id, err := tuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TwitchUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TwitchUser entity is found.
// Returns a *NotFoundError when no TwitchUser entities are found.
func (tuq *TwitchUserQuery) Only(ctx context.Context) (*TwitchUser, error) {
	nodes, err := tuq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{twitchuser.Label}
	default:
		return nil, &NotSingularError{twitchuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tuq *TwitchUserQuery) OnlyX(ctx context.Context) *TwitchUser {
	node, err := tuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TwitchUser ID in the query.
// Returns a *NotSingularError when more than one TwitchUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (tuq *TwitchUserQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = tuq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{twitchuser.Label}
	default:
		err = &NotSingularError{twitchuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tuq *TwitchUserQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := tuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TwitchUsers.
func (tuq *TwitchUserQuery) All(ctx context.Context) ([]*TwitchUser, error) {
	if err := tuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tuq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tuq *TwitchUserQuery) AllX(ctx context.Context) []*TwitchUser {
	nodes, err := tuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TwitchUser IDs.
func (tuq *TwitchUserQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := tuq.Select(twitchuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tuq *TwitchUserQuery) IDsX(ctx context.Context) []int64 {
	ids, err := tuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tuq *TwitchUserQuery) Count(ctx context.Context) (int, error) {
	if err := tuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tuq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tuq *TwitchUserQuery) CountX(ctx context.Context) int {
	count, err := tuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tuq *TwitchUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := tuq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tuq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tuq *TwitchUserQuery) ExistX(ctx context.Context) bool {
	exist, err := tuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TwitchUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tuq *TwitchUserQuery) Clone() *TwitchUserQuery {
	if tuq == nil {
		return nil
	}
	return &TwitchUserQuery{
		config:           tuq.config,
		limit:            tuq.limit,
		offset:           tuq.offset,
		order:            append([]OrderFunc{}, tuq.order...),
		predicates:       append([]predicate.TwitchUser{}, tuq.predicates...),
		withScoreRatings: tuq.withScoreRatings.Clone(),
		withUserPrices:   tuq.withUserPrices.Clone(),
		withUserOpinions: tuq.withUserOpinions.Clone(),
		// clone intermediate query.
		sql:    tuq.sql.Clone(),
		path:   tuq.path,
		unique: tuq.unique,
	}
}

// WithScoreRatings tells the query-builder to eager-load the nodes that are connected to
// the "score_ratings" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TwitchUserQuery) WithScoreRatings(opts ...func(*ScoreRatingQuery)) *TwitchUserQuery {
	query := &ScoreRatingQuery{config: tuq.config}
	for _, opt := range opts {
		opt(query)
	}
	tuq.withScoreRatings = query
	return tuq
}

// WithUserPrices tells the query-builder to eager-load the nodes that are connected to
// the "user_prices" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TwitchUserQuery) WithUserPrices(opts ...func(*ShopPriceQuery)) *TwitchUserQuery {
	query := &ShopPriceQuery{config: tuq.config}
	for _, opt := range opts {
		opt(query)
	}
	tuq.withUserPrices = query
	return tuq
}

// WithUserOpinions tells the query-builder to eager-load the nodes that are connected to
// the "user_opinions" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TwitchUserQuery) WithUserOpinions(opts ...func(*UserOpinionQuery)) *TwitchUserQuery {
	query := &UserOpinionQuery{config: tuq.config}
	for _, opt := range opts {
		opt(query)
	}
	tuq.withUserOpinions = query
	return tuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Login string `json:"login,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TwitchUser.Query().
//		GroupBy(twitchuser.FieldLogin).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tuq *TwitchUserQuery) GroupBy(field string, fields ...string) *TwitchUserGroupBy {
	grbuild := &TwitchUserGroupBy{config: tuq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tuq.sqlQuery(ctx), nil
	}
	grbuild.label = twitchuser.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Login string `json:"login,omitempty"`
//	}
//
//	client.TwitchUser.Query().
//		Select(twitchuser.FieldLogin).
//		Scan(ctx, &v)
func (tuq *TwitchUserQuery) Select(fields ...string) *TwitchUserSelect {
	tuq.fields = append(tuq.fields, fields...)
	selbuild := &TwitchUserSelect{TwitchUserQuery: tuq}
	selbuild.label = twitchuser.Label
	selbuild.flds, selbuild.scan = &tuq.fields, selbuild.Scan
	return selbuild
}

func (tuq *TwitchUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tuq.fields {
		if !twitchuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tuq.path != nil {
		prev, err := tuq.path(ctx)
		if err != nil {
			return err
		}
		tuq.sql = prev
	}
	return nil
}

func (tuq *TwitchUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TwitchUser, error) {
	var (
		nodes       = []*TwitchUser{}
		withFKs     = tuq.withFKs
		_spec       = tuq.querySpec()
		loadedTypes = [3]bool{
			tuq.withScoreRatings != nil,
			tuq.withUserPrices != nil,
			tuq.withUserOpinions != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, twitchuser.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*TwitchUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &TwitchUser{config: tuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tuq.withScoreRatings; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*TwitchUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ScoreRatings = []*ScoreRating{}
		}
		query.withFKs = true
		query.Where(predicate.ScoreRating(func(s *sql.Selector) {
			s.Where(sql.InValues(twitchuser.ScoreRatingsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.twitch_user_score_ratings
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "twitch_user_score_ratings" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "twitch_user_score_ratings" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ScoreRatings = append(node.Edges.ScoreRatings, n)
		}
	}

	if query := tuq.withUserPrices; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*TwitchUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserPrices = []*ShopPrice{}
		}
		query.withFKs = true
		query.Where(predicate.ShopPrice(func(s *sql.Selector) {
			s.Where(sql.InValues(twitchuser.UserPricesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.twitch_user_user_prices
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "twitch_user_user_prices" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "twitch_user_user_prices" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.UserPrices = append(node.Edges.UserPrices, n)
		}
	}

	if query := tuq.withUserOpinions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*TwitchUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserOpinions = []*UserOpinion{}
		}
		query.withFKs = true
		query.Where(predicate.UserOpinion(func(s *sql.Selector) {
			s.Where(sql.InValues(twitchuser.UserOpinionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.twitch_user_user_opinions
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "twitch_user_user_opinions" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "twitch_user_user_opinions" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.UserOpinions = append(node.Edges.UserOpinions, n)
		}
	}

	return nodes, nil
}

func (tuq *TwitchUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tuq.querySpec()
	_spec.Node.Columns = tuq.fields
	if len(tuq.fields) > 0 {
		_spec.Unique = tuq.unique != nil && *tuq.unique
	}
	return sqlgraph.CountNodes(ctx, tuq.driver, _spec)
}

func (tuq *TwitchUserQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tuq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tuq *TwitchUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   twitchuser.Table,
			Columns: twitchuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: twitchuser.FieldID,
			},
		},
		From:   tuq.sql,
		Unique: true,
	}
	if unique := tuq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tuq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twitchuser.FieldID)
		for i := range fields {
			if fields[i] != twitchuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tuq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tuq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tuq *TwitchUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tuq.driver.Dialect())
	t1 := builder.Table(twitchuser.Table)
	columns := tuq.fields
	if len(columns) == 0 {
		columns = twitchuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tuq.sql != nil {
		selector = tuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tuq.unique != nil && *tuq.unique {
		selector.Distinct()
	}
	for _, p := range tuq.predicates {
		p(selector)
	}
	for _, p := range tuq.order {
		p(selector)
	}
	if offset := tuq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tuq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TwitchUserGroupBy is the group-by builder for TwitchUser entities.
type TwitchUserGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tugb *TwitchUserGroupBy) Aggregate(fns ...AggregateFunc) *TwitchUserGroupBy {
	tugb.fns = append(tugb.fns, fns...)
	return tugb
}

// Scan applies the group-by query and scans the result into the given value.
func (tugb *TwitchUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tugb.path(ctx)
	if err != nil {
		return err
	}
	tugb.sql = query
	return tugb.sqlScan(ctx, v)
}

func (tugb *TwitchUserGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tugb.fields {
		if !twitchuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tugb *TwitchUserGroupBy) sqlQuery() *sql.Selector {
	selector := tugb.sql.Select()
	aggregation := make([]string, 0, len(tugb.fns))
	for _, fn := range tugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tugb.fields)+len(tugb.fns))
		for _, f := range tugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tugb.fields...)...)
}

// TwitchUserSelect is the builder for selecting fields of TwitchUser entities.
type TwitchUserSelect struct {
	*TwitchUserQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tus *TwitchUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tus.prepareQuery(ctx); err != nil {
		return err
	}
	tus.sql = tus.TwitchUserQuery.sqlQuery(ctx)
	return tus.sqlScan(ctx, v)
}

func (tus *TwitchUserSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tus.sql.Query()
	if err := tus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
